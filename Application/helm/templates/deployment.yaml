kind: Deployment
apiVersion: apps/v1
metadata:
# set your lab user name
  name: {{ .Release.Name }}
  # name: israeldaskal-hello-world
spec:
  replicas: {{ .Values.ReplicaNumber }}
  selector:
    matchLabels:
# set your lab user name
      app: {{ .Release.Name }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "ConfigMap.yaml") . | sha256sum }}
      labels:
# set your lab user name
        # app: israeldaskal-hello-world
        app: {{ .Release.Name }}
    spec:
      volumes:
          - name: index-html
            configMap:
              name: index.html
              defaultMode: 420
      containers:
        - resources: {}
          terminationMessagePath: /dev/termination-log
          name: {{ .Release.Name }}
          ports:
            - containerPort: {{ .Values.containers.containerPort }}
              protocol: TCP
          imagePullPolicy: Always
          # update with the image you build in part 1
          image: '{{ .Values.containers.image }}:{{ .Values.containers.tag }}' 
          volumeMounts:
          - name: index-html
            mountPath: {{ .Values.volumes.mount.path }}
          # image: 'quay.io/israeldaskal/argocd:v2'
          readinessProbe:
            httpGet:
              path: {{ .Values.readinessProbe.httpGet.path }}
              port: {{ .Values.containers.containerPort  }} # In which port the Application is listening
              scheme: HTTP
            initialDelaySeconds: {{ .Values.readinessProbe.httpGet.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.httpGet.timeoutSeconds }}
            periodSeconds: {{ .Values.readinessProbe.httpGet.periodSeconds }}
            successThreshold: {{ .Values.readinessProbe.httpGet.successThreshold }}
            failureThreshold: {{ .Values.readinessProbe.httpGet.failureThreshold }}
          livenessProbe:
            httpGet:
              path: /health/liveliness
              port: {{ .Values.containers.containerPort }}
              scheme: HTTP
            initialDelaySeconds: {{ .Values.livenessProbe.httpGet.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.httpGet.timeoutSeconds }}
            periodSeconds: {{ .Values.livenessProbe.httpGet.periodSeconds }}
            successThreshold: {{ .Values.livenessProbe.httpGet.successThreshold }}
            failureThreshold: {{ .Values.livenessProbe.httpGet.failureThreshold }}
          env:
            - name: PORT
              value: {{ .Values.containers.containerPort | quote }}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  revisionHistoryLimit: 10